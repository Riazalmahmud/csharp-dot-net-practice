using System;
using System.Dynamic;
[AttributeUsage(AttributeTargets.All, AllowMultiple = true)]

class HelpAttribute : System.Attribute
{

  public readonly string url;

  private string topic;

  public string Topic
  {
    get { return topic; }
    set { topic = value; }
  }
  public HelpAttribute(string url)
  {
    this.url = url;

  }

}
// Apply the attribute to a class
[Help("Information on the class MyClass", Topic = "Class Info")]
class MyClass
{
}

namespace ReflectionTest
{


  class ReflectionClass
  {

    static int romanToInt(string x)
    {
      var romanToInt = new Dictionary<char, int>
      {
        {'I', 1},
        {'V', 5},
        {'X', 10},
        {'L', 50},
        {'C', 100},
        {'D', 500},
        {'M', 1000}
      };
      int result = 0;

      if (!IsValidRoman(x))
      {
        Console.WriteLine($"Invalid Roman numeral: {x}");
        return -1; // অথবা throw new Exception("Invalid Roman numeral");
      }
      for (int i = 0; i < x.Length; i++)
      {
        int num1 = romanToInt[x[i]];
        int num2 = i > 0 ? romanToInt[x[i - 1]] : 0;
        if (i > 0 && romanToInt[x[i]] > romanToInt[x[i - 1]])
        {
          result += romanToInt[x[i]] - 2 * romanToInt[x[i - 1]];
        }
        else
        {
          result += romanToInt[x[i]];
        }
      }
      Console.WriteLine($"Roman numeral {x} converted to integer: {result}");
      return result;
    }

    static bool IsValidRoman(string s)
    {
      // রোমান সংখ্যার জন্য একটি regular expression
      var regex = new System.Text.RegularExpressions.Regex(
          "^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$"
      );
      return regex.IsMatch(s);
    }
    static void Main(string[] args)
    {
      romanToInt("VIII");
    }
  }
}
