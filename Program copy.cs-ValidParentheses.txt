using System;
using System.Dynamic;
[AttributeUsage(AttributeTargets.All, AllowMultiple = true)]

class HelpAttribute : System.Attribute
{

  public readonly string url;

  private string topic;

  public string Topic
  {
    get { return topic; }
    set { topic = value; }
  }
  public HelpAttribute(string url)
  {
    this.url = url;

  }

}
// Apply the attribute to a class
[Help("Information on the class MyClass", Topic = "Class Info")]
class MyClass
{
}

namespace ReflectionTest
{


  class ReflectionClass
  {

    static bool ValidParentheses(string strs)
    {
      if (string.IsNullOrEmpty(strs))
        return false;

      Stack<char> stack = new Stack<char>();
      foreach (char c in strs)
      {
        if (c == '(' || c == '{' || c == '[')
        {
          stack.Push(c);
        }
        else if (c == ')' || c == '}' || c == ']')
        {
          if (stack.Count == 0 || !IsMatchingPair(stack.Pop(), c))
            return false;
        }
      }
      return stack.Count == 0;
    }

    static bool IsMatchingPair(char open, char close)
    {
      return (open == '(' && close == ')') ||
             (open == '{' && close == '}') ||
             (open == '[' && close == ']');
    }

    static void Main(string[] args)
    {
    
      bool result = ValidParentheses("(), {}");
      Console.WriteLine("Are the parentheses valid? " + result);
    }
  }
}
